{
	"info": {
		"_postman_id": "deb05218-dc65-4299-a7f2-943e7cfdb755",
		"name": "Person",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Initialize",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3e1dad43-0960-429b-bb89-1b83c7d5dca9",
						"exec": [
							"// API completed successfully\r",
							"pm.test(\"response is ok\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"// Define the JSON schema for the payload\r",
							"var Ajv = require('ajv'),\r",
							"    ajv = new Ajv({allErrors: true, verbose: true}),\r",
							"    schema = \r",
							"{\r",
							"  \"type\": \"array\",\r",
							"  \"items\": {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"      \"id\":         { \"type\": \"integer\" },\r",
							"      \"firstName\":  { \"type\": \"string\" },\r",
							"      \"lastName\":   { \"type\": \"string\" },\r",
							"      \"street\":     { \"type\": \"string\" },\r",
							"      \"city\":       { \"type\": \"string\" },\r",
							"      \"state\":      { \"type\": \"string\" },\r",
							"      \"zip\":        { \"type\": \"string\" },\r",
							"      \"phone\":      { \"type\": \"string\" },\r",
							"      \"email\":      { \"type\": \"string\" },\r",
							"      \"birthday\":   { \"type\": \"string\" },\r",
							"      \"hobbies\": { \r",
							"        \"type\": \"array\",\r",
							"        \"items\": {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"id\":     { \"type\": \"integer\" },\r",
							"            \"name\":   { \"type\": \"string\"  },\r",
							"            \"person\": { \"type\": \"integer\" }\r",
							"          },\r",
							"          \"required\": [\"id\", \"name\", \"person\"],\r",
							"          \"additionalProperties\": false\r",
							"        }\r",
							"      },\r",
							"      \"pets\": { \r",
							"        \"type\": \"array\",\r",
							"        \"items\": {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"id\":     { \"type\": \"integer\" },\r",
							"            \"name\":   { \"type\": \"string\"  },\r",
							"            \"person\": { \"type\": \"integer\" }\r",
							"          },\r",
							"          \"required\": [\"id\", \"name\", \"person\"],\r",
							"          \"additionalProperties\": false\r",
							"        }\r",
							"      }\r",
							"    },\r",
							"    \"required\": [\"id\", \"firstName\", \"lastName\", \"street\", \"city\",\r",
							"                 \"state\", \"zip\", \"phone\", \"email\", \"birthday\"],\r",
							"    \"additionalProperties\": false\r",
							"  }\r",
							"};\r",
							"\r",
							"// Test the payload against the JSON Schema\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.expect(\r",
							"    ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)\r",
							"  ).to.be.true;\r",
							"});\r",
							"\r",
							"// Person object properties - Check Fred, userId 4\r",
							"pm.test(\"Person object is valid\", function () {\r",
							"    var data = pm.response.json();\r",
							"\r",
							"    pm.expect(data.length).to.eql(4, \"Array size\");\r",
							"\r",
							"    // Returned data is ordered by lastName, firstName making Fred the 3rd element\r",
							"    pm.expect(data[0].id).to.eql(1, \"id\");\r",
							"    pm.expect(data[0].firstName).to.eql(\"Fred\", \"firstName\");\r",
							"    pm.expect(data[0].lastName).to.eql(\"Flintstone\", \"lastName\");\r",
							"    \r",
							"    pm.expect(data[0].street).to.eql(\"345 Cave Stone Rd\", \"street\");\r",
							"    pm.expect(data[0].city).to.eql(\"Bedrock\", \"city\");\r",
							"    pm.expect(data[0].state).to.eql(\"NA\", \"state\");\r",
							"    pm.expect(data[0].zip).to.eql(\"123\", \"zip\");\r",
							"    \r",
							"    pm.expect(data[0].phone).to.eql(\"1\", \"phone\");\r",
							"    pm.expect(data[0].email).to.eql(\"fred@bedrock.com\", \"email\");\r",
							"    pm.expect(data[0].birthday).to.eql(\"1970-01-01T00:00:00\", \"birthday\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:5000/api/person/initialize",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"person",
						"initialize"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3381527a-2788-4233-8c76-71411ea3318f",
						"exec": [
							"// API completed successfully\r",
							"pm.test(\"response is ok\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"// Define the JSON schema for the payload\r",
							"var Ajv = require('ajv'),\r",
							"    ajv = new Ajv({allErrors: true, verbose: true}),\r",
							"    schema = \r",
							"{\r",
							"  \"type\": \"array\",\r",
							"  \"items\": {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"      \"id\":         { \"type\": \"integer\" },\r",
							"      \"firstName\":  { \"type\": \"string\" },\r",
							"      \"lastName\":   { \"type\": \"string\" },\r",
							"      \"street\":     { \"type\": \"string\" },\r",
							"      \"city\":       { \"type\": \"string\" },\r",
							"      \"state\":      { \"type\": \"string\" },\r",
							"      \"zip\":        { \"type\": \"string\" },\r",
							"      \"phone\":      { \"type\": \"string\" },\r",
							"      \"email\":      { \"type\": \"string\" },\r",
							"      \"birthday\":   { \"type\": \"string\" },\r",
							"      \"hobbies\": { \r",
							"        \"type\": \"array\",\r",
							"        \"items\": {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"id\":     { \"type\": \"integer\" },\r",
							"            \"name\":   { \"type\": \"string\"  },\r",
							"            \"person\": { \"type\": \"integer\" }\r",
							"          },\r",
							"          \"required\": [\"id\", \"name\", \"person\"],\r",
							"          \"additionalProperties\": false\r",
							"        }\r",
							"      },\r",
							"      \"pets\": { \r",
							"        \"type\": \"array\",\r",
							"        \"items\": {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"id\":     { \"type\": \"integer\" },\r",
							"            \"name\":   { \"type\": \"string\"  },\r",
							"            \"person\": { \"type\": \"integer\" }\r",
							"          },\r",
							"          \"required\": [\"id\", \"name\", \"person\"],\r",
							"          \"additionalProperties\": false\r",
							"        }\r",
							"      }\r",
							"    },\r",
							"    \"required\": [\"id\", \"firstName\", \"lastName\", \"street\", \"city\",\r",
							"                 \"state\", \"zip\", \"phone\", \"email\", \"birthday\"],\r",
							"    \"additionalProperties\": false\r",
							"  }\r",
							"};\r",
							"\r",
							"// Test the payload against the JSON Schema\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.expect(\r",
							"    ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)\r",
							"  ).to.be.true;\r",
							"});\r",
							"\r",
							"// Person object properties - Check Fred, userId 4\r",
							"pm.test(\"Person object is valid\", function () {\r",
							"    var data = pm.response.json();\r",
							"\r",
							"    pm.expect(data.length).to.eql(4, \"Array size\");\r",
							"\r",
							"    // Returned data is ordered by lastName, firstName making Fred the 3rd element\r",
							"    pm.expect(data[0].id).to.eql(1, \"id\");\r",
							"    pm.expect(data[0].firstName).to.eql(\"Fred\", \"firstName\");\r",
							"    pm.expect(data[0].lastName).to.eql(\"Flintstone\", \"lastName\");\r",
							"    \r",
							"    pm.expect(data[0].street).to.eql(\"345 Cave Stone Rd\", \"street\");\r",
							"    pm.expect(data[0].city).to.eql(\"Bedrock\", \"city\");\r",
							"    pm.expect(data[0].state).to.eql(\"NA\", \"state\");\r",
							"    pm.expect(data[0].zip).to.eql(\"123\", \"zip\");\r",
							"    \r",
							"    pm.expect(data[0].phone).to.eql(\"1\", \"phone\");\r",
							"    pm.expect(data[0].email).to.eql(\"fred@bedrock.com\", \"email\");\r",
							"    pm.expect(data[0].birthday).to.eql(\"1970-01-01T00:00:00\", \"birthday\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5000/api/all/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"all",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get one",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f2508c24-eb82-4a82-8363-68491e9267dd",
						"exec": [
							"// API completed successfully\r",
							"pm.test(\"response is ok\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"// Define the JSON schema for the payload\r",
							"var Ajv = require('ajv'),\r",
							"    ajv = new Ajv({allErrors: true, verbose: true}),\r",
							"    schema = \r",
							"{\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\":         { \"type\": \"integer\" },\r",
							"    \"firstName\":  { \"type\": \"string\" },\r",
							"    \"lastName\":   { \"type\": \"string\" },\r",
							"    \"street\":     { \"type\": \"string\" },\r",
							"    \"city\":       { \"type\": \"string\" },\r",
							"    \"state\":      { \"type\": \"string\" },\r",
							"    \"zip\":        { \"type\": \"string\" },\r",
							"    \"phone\":      { \"type\": \"string\" },\r",
							"    \"email\":      { \"type\": \"string\" },\r",
							"    \"birthday\":   { \"type\": \"string\" },\r",
							"    \"hobbies\": { \r",
							"      \"type\": \"array\",\r",
							"      \"items\": {\r",
							"        \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"          \"id\":     { \"type\": \"integer\" },\r",
							"          \"name\":   { \"type\": \"string\"  },\r",
							"          \"person\": { \"type\": \"integer\" }\r",
							"        },\r",
							"        \"required\": [\"id\", \"name\", \"person\"],\r",
							"        \"additionalProperties\": false\r",
							"      }\r",
							"    },\r",
							"    \"pets\": { \r",
							"      \"type\": \"array\",\r",
							"      \"items\": {\r",
							"        \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"          \"id\":     { \"type\": \"integer\" },\r",
							"          \"name\":   { \"type\": \"string\"  },\r",
							"          \"person\": { \"type\": \"integer\" }\r",
							"        },\r",
							"        \"required\": [\"id\", \"name\", \"person\"],\r",
							"        \"additionalProperties\": false\r",
							"      }\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\"id\", \"firstName\", \"lastName\", \"street\", \"city\",\r",
							"               \"state\", \"zip\", \"phone\", \"email\", \"birthday\"],\r",
							"  \"additionalProperties\": false\r",
							"};\r",
							"\r",
							"// Test the payload against the JSON Schema\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.expect(\r",
							"    ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)\r",
							"  ).to.be.true;\r",
							"});\r",
							"\r",
							"// Person object properties\r",
							"pm.test(\"Person object is valid\", function () {\r",
							"  var data = pm.response.json();\r",
							"\r",
							"  pm.expect(data.id).to.eql(1, \"id\");\r",
							"  pm.expect(data.firstName).to.eql(\"Fred\", \"firstName\");\r",
							"  pm.expect(data.lastName).to.eql(\"Flintstone\", \"lastName\");\r",
							"    \r",
							"  pm.expect(data.street).to.eql(\"345 Cave Stone Rd\", \"street\");\r",
							"  pm.expect(data.city).to.eql(\"Bedrock\", \"city\");\r",
							"  pm.expect(data.state).to.eql(\"NA\", \"state\");\r",
							"  pm.expect(data.zip).to.eql(\"123\", \"zip\");\r",
							"    \r",
							"  pm.expect(data.phone).to.eql(\"1\", \"phone\");\r",
							"  pm.expect(data.email).to.eql(\"fred@bedrock.com\", \"email\");\r",
							"  pm.expect(data.birthday).to.eql(\"1970-01-01T00:00:00\", \"birthday\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5000/api/person/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"person",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7a3ba8d0-3e6c-451a-9411-ad7f6587ca77",
						"exec": [
							"// API completed successfully\r",
							"pm.test(\"response is ok\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"// Define the JSON schema for the payload\r",
							"var Ajv = require('ajv'),\r",
							"    ajv = new Ajv({allErrors: true, verbose: true}),\r",
							"    schema = \r",
							"{\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\":         { \"type\": \"integer\" },\r",
							"    \"firstName\":  { \"type\": \"string\" },\r",
							"    \"lastName\":   { \"type\": \"string\" },\r",
							"    \"street\":     { \"type\": \"string\" },\r",
							"    \"city\":       { \"type\": \"string\" },\r",
							"    \"state\":      { \"type\": \"string\" },\r",
							"    \"zip\":        { \"type\": \"string\" },\r",
							"    \"phone\":      { \"type\": \"string\" },\r",
							"    \"email\":      { \"type\": \"string\" },\r",
							"    \"birthday\":   { \"type\": \"string\" },\r",
							"    \"hobbies\": { \r",
							"      \"type\": \"array\",\r",
							"      \"items\": {\r",
							"        \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"          \"id\":     { \"type\": \"integer\" },\r",
							"          \"name\":   { \"type\": \"string\"  },\r",
							"          \"person\": { \"type\": \"integer\" }\r",
							"        },\r",
							"        \"required\": [\"id\", \"name\", \"person\"],\r",
							"        \"additionalProperties\": false\r",
							"      }\r",
							"    },\r",
							"    \"pets\": { \r",
							"      \"type\": \"array\",\r",
							"      \"items\": {\r",
							"        \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"          \"id\":     { \"type\": \"integer\" },\r",
							"          \"name\":   { \"type\": \"string\"  },\r",
							"          \"person\": { \"type\": \"integer\" }\r",
							"        },\r",
							"        \"required\": [\"id\", \"name\", \"person\"],\r",
							"        \"additionalProperties\": false\r",
							"      }\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\"id\", \"firstName\", \"lastName\", \"street\", \"city\",\r",
							"               \"state\", \"zip\", \"phone\", \"email\", \"birthday\"],\r",
							"  \"additionalProperties\": false\r",
							"};\r",
							"\r",
							"// Test the payload against the JSON Schema\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.expect(\r",
							"    ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)\r",
							"  ).to.be.true;\r",
							"});\r",
							"\r",
							"// Person object properties\r",
							"pm.test(\"Person object is valid\", function () {\r",
							"  var data = pm.response.json();\r",
							"\r",
							"  // Don't test id, we don't know what its value will be \r",
							"  // pm.expect(data.id).to.eql(1, \"id\");\r",
							"  pm.expect(data.firstName).to.eql(\"Jim\", \"firstName\");\r",
							"  pm.expect(data.lastName).to.eql(\"Shea\", \"lastName\");\r",
							"    \r",
							"  pm.expect(data.street).to.eql(\"4800 Oak Grove Dr\", \"street\");\r",
							"  pm.expect(data.city).to.eql(\"Pasadena\", \"city\");\r",
							"  pm.expect(data.state).to.eql(\"CA\", \"state\");\r",
							"  pm.expect(data.zip).to.eql(\"91109\", \"zip\");\r",
							"    \r",
							"  pm.expect(data.phone).to.eql(\"8183547751\", \"phone\");\r",
							"  pm.expect(data.email).to.eql(\"jshea@jpl.nasa.gov\", \"email\");\r",
							"  pm.expect(data.birthday).to.eql(\"1970-01-01T00:00:00\", \"birthday\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "28edc210-605b-493e-b5d5-ebbd1557059b",
						"exec": [
							"// Get the body we're going to send, so we can validate it.\r",
							"var Property = require('postman-collection').Property;\r",
							"\r",
							"var resolvedBody = Property.replaceSubstitutions(pm.request.body.raw, pm.variables.toObject());\r",
							"\r",
							"// Define the JSON schema for the payload\r",
							"// Note - hobbies & pets aren't required\r",
							"var Ajv = require('ajv'),\r",
							"    ajv = new Ajv({allErrors: true, verbose: true}),\r",
							"    schema = \r",
							"{\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"firstName\":  { \"type\": \"string\" },\r",
							"    \"lastName\":   { \"type\": \"string\" },\r",
							"    \"street\":     { \"type\": \"string\" },\r",
							"    \"city\":       { \"type\": \"string\" },\r",
							"    \"state\":      { \"type\": \"string\" },\r",
							"    \"zip\":        { \"type\": \"string\" },\r",
							"    \"phone\":      { \"type\": \"string\" },\r",
							"    \"email\":      { \"type\": \"string\" },\r",
							"    \"birthday\":   { \"type\": \"string\" },\r",
							"    \"hobbies\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": {\r",
							"        \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"          \"id\":    { \"type\": \"integer\" },\r",
							"          \"name\":  { \"type\": \"string\" }\r",
							"        },\r",
							"        \"required\": [\"id\", \"name\"]\r",
							"      }\r",
							"    },\r",
							"    \"pets\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": {\r",
							"        \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"          \"id\":    { \"type\": \"integer\" },\r",
							"          \"name\":  { \"type\": \"string\" }\r",
							"        },\r",
							"        \"required\": [\"id\", \"name\"]\r",
							"      }\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\"firstName\", \"lastName\", \"street\", \"city\",\r",
							"               \"state\", \"zip\", \"phone\", \"email\", \"birthday\"],\r",
							"  \"additionalProperties\": false\r",
							"};\r",
							"\r",
							"// Test the payload against the JSON Schema\r",
							"pm.test('Schema is valid', function() {\r",
							"  let body = JSON.parse(resolvedBody);\r",
							"  pm.expect(ajv.validate(schema, body), JSON.stringify(ajv.errors)).to.be.true;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"firstName\": \"Jim\",\r\n  \"lastName\": \"Shea\",\r\n  \"street\": \"4800 Oak Grove Dr\",\r\n  \"city\": \"Pasadena\",\r\n  \"state\": \"CA\",\r\n  \"zip\": \"91109\",\r\n  \"phone\": \"8183547751\",\r\n  \"email\": \"jshea@jpl.nasa.gov\",\r\n  \"birthday\": \"1970-01-01\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/person",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"person"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7e853b81-6389-4346-8a64-1f249552f869",
						"exec": [
							"// API completed successfully\r",
							"pm.test(\"response is ok\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"// Define the JSON schema for the payload\r",
							"var Ajv = require('ajv'),\r",
							"    ajv = new Ajv({allErrors: true, verbose: true}),\r",
							"    schema = \r",
							"{\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\":         { \"type\": \"integer\" },\r",
							"    \"firstName\":  { \"type\": \"string\" },\r",
							"    \"lastName\":   { \"type\": \"string\" },\r",
							"    \"street\":     { \"type\": \"string\" },\r",
							"    \"city\":       { \"type\": \"string\" },\r",
							"    \"state\":      { \"type\": \"string\" },\r",
							"    \"zip\":        { \"type\": \"string\" },\r",
							"    \"phone\":      { \"type\": \"string\" },\r",
							"    \"email\":      { \"type\": \"string\" },\r",
							"    \"birthday\":   { \"type\": \"string\" },\r",
							"    \"hobbies\": { \r",
							"      \"type\": \"array\",\r",
							"      \"items\": {\r",
							"        \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"          \"id\":     { \"type\": \"integer\" },\r",
							"          \"name\":   { \"type\": \"string\"  },\r",
							"          \"person\": { \"type\": \"integer\" }\r",
							"        },\r",
							"        \"required\": [\"id\", \"name\", \"person\"],\r",
							"        \"additionalProperties\": false\r",
							"      }\r",
							"    },\r",
							"    \"pets\": { \r",
							"      \"type\": \"array\",\r",
							"      \"items\": {\r",
							"        \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"          \"id\":     { \"type\": \"integer\" },\r",
							"          \"name\":   { \"type\": \"string\"  },\r",
							"          \"person\": { \"type\": \"integer\" }\r",
							"        },\r",
							"        \"required\": [\"id\", \"name\", \"person\"],\r",
							"        \"additionalProperties\": false\r",
							"      }\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\"id\", \"firstName\", \"lastName\", \"street\", \"city\",\r",
							"               \"state\", \"zip\", \"phone\", \"email\", \"birthday\"],\r",
							"  \"additionalProperties\": false\r",
							"};\r",
							"\r",
							"// Test the payload against the JSON Schema\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.expect(\r",
							"    ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)\r",
							"  ).to.be.true;\r",
							"});\r",
							"\r",
							"// Person object properties\r",
							"pm.test(\"Person object is valid\", function () {\r",
							"  var data = pm.response.json();\r",
							"\r",
							"  // Don't test id as it may change from run to run\r",
							"  // pm.expect(data.id).to.eql(1, \"id\");\r",
							"  pm.expect(data.firstName).to.eql(\"James\", \"firstName\");\r",
							"  pm.expect(data.lastName).to.eql(\"O'Shea\", \"lastName\");\r",
							"\r",
							"  pm.expect(data.street).to.eql(\"4800 Oak Grove Dr\", \"street\");\r",
							"  pm.expect(data.city).to.eql(\"Pasadena\", \"city\");\r",
							"  pm.expect(data.state).to.eql(\"CA\", \"state\");\r",
							"  pm.expect(data.zip).to.eql(\"91109\", \"zip\");\r",
							"  \r",
							"  pm.expect(data.phone).to.eql(\"8183547751\", \"phone\");\r",
							"  pm.expect(data.email).to.eql(\"james.t.shea@jpl.nasa.gov\", \"email\");\r",
							"  pm.expect(data.birthday).to.eql(\"1970-02-01T00:00:00\", \"birthday\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "abd74442-3c1c-4a49-b0bd-42d9a90590a0",
						"exec": [
							"// Get the body we're going to send, so we can validate it.\r",
							"var Property = require('postman-collection').Property;\r",
							"\r",
							"var resolvedBody = Property.replaceSubstitutions(pm.request.body.raw, pm.variables.toObject());\r",
							"\r",
							"// Define the JSON schema for the payload\r",
							"// Note - hobbies & pets aren't required\r",
							"var Ajv = require('ajv'),\r",
							"    ajv = new Ajv({allErrors: true, verbose: true}),\r",
							"    schema = \r",
							"{\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\":    { \"type\": \"integer\" },\r",
							"    \"firstName\":  { \"type\": \"string\" },\r",
							"    \"lastName\":   { \"type\": \"string\" },\r",
							"    \"street\":     { \"type\": \"string\" },\r",
							"    \"city\":       { \"type\": \"string\" },\r",
							"    \"state\":      { \"type\": \"string\" },\r",
							"    \"zip\":        { \"type\": \"string\" },\r",
							"    \"phone\":      { \"type\": \"string\" },\r",
							"    \"email\":      { \"type\": \"string\" },\r",
							"    \"birthday\":   { \"type\": \"string\" },\r",
							"    \"hobbies\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": {\r",
							"        \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"          \"id\":    { \"type\": \"integer\" },\r",
							"          \"name\":  { \"type\": \"string\" }\r",
							"        },\r",
							"        \"required\": [\"id\", \"name\"]\r",
							"      }\r",
							"    },\r",
							"    \"pets\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": {\r",
							"        \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"          \"id\":    { \"type\": \"integer\" },\r",
							"          \"name\":  { \"type\": \"string\" }\r",
							"        },\r",
							"        \"required\": [\"id\", \"name\"]\r",
							"      }\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\"id\", \"firstName\", \"lastName\", \"street\", \"city\",\r",
							"               \"state\", \"zip\", \"phone\", \"email\", \"birthday\"],\r",
							"  \"additionalProperties\": false\r",
							"};\r",
							"\r",
							"// Test the payload against the JSON Schema\r",
							"pm.test('Schema is valid', function() {\r",
							"  let body = JSON.parse(resolvedBody);\r",
							"  pm.expect(ajv.validate(schema, body), JSON.stringify(ajv.errors)).to.be.true;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": 5,\n  \"firstName\": \"James\",\n  \"lastName\": \"O'Shea\",\n  \"street\": \"4800 Oak Grove Dr\",\n  \"city\": \"Pasadena\",\n  \"state\": \"CA\",\n  \"zip\": \"91109\",\n  \"phone\": \"8183547751\",\n  \"email\": \"james.t.shea@jpl.nasa.gov\",\n  \"birthday\": \"1970-02-01\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/person",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"person"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "18554e9d-3e58-4930-8b1f-d19879062ab3",
						"exec": [
							"// API completed successfully\r",
							"pm.test(\"response is ok\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"    pm.response.to.not.be.withBody;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:5000/api/person/5",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"person",
						"5"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}